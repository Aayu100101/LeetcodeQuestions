Approach 1 - Naive 

Explaination - Create replica of the matrix, say tempMatrix. Traverse this tempMatrix and meanwhile make changes in main array.
Result - Passed All TestCases 
         Runtime : Better than 84.13% of C++ submissions.
         Space Used : Better than 11.01% of C++ submissions.
         
Code -

class Solution {
public:
    
    void setValues(int r1,int c1, vector<vector<int>> &matrix){        //setting the entire row & column to 0.
        int r = matrix.size();
        int c = matrix[0].size();
        
        for(int i=0;i<c;++i){
            matrix[r1][i] = 0;
        }
        
        for(int i=0;i<r;++i){
            matrix[i][c1] = 0;
        }
    }
    
    void setZeroes(vector<vector<int>>& matrix) {
        int r = matrix.size();                                    
        int c = matrix[0].size();
        
        vector<vector<int>> temp(r);                                  // creating replica of the matrix
        for(int i=0;i<r;++i){
            for(int j=0;j<c;++j){
                temp[i].push_back(matrix[i][j]);
            }
        }
        
        for(int i=0;i<r;++i){                                         // checking for 0 in the tempMatrix and making changes in the main matrix.
            for(int j=0;j<c;++j){
                if(temp[i][j] == 0){
                    setValues(i, j, matrix);
                }
            }
        }
        
    }
};
